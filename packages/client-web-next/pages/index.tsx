import Head from "next/head";
import { useState, useEffect } from "react";
import type { NextPage } from "next";
import styles from "../styles/Home.module.scss";
import List from "../components/List";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { findSiteData, findNavData, FindSiteQuery } from "../globals/apis";
import { SiteListContext } from "../hooks/SiteListContext";
import { NavigationListContext } from "../hooks/NavigationListContext";
import type { SiteListResponse } from "../types/site";
import type { NavigationListResponse } from "../types/navigation";
import { initializeApollo, addApolloState } from "../libs/apolloClient";
import { gql, useQuery, NetworkStatus } from "@apollo/client";

const queryDetail: FindSiteQuery = {
  size: 20,
  page: 1,
  type: undefined,
};

export const ALL_POSTS_QUERY = gql`
  query {
    navigations {
      total
      list {
        id
        title
        description
        siteUrl
        iconUrl
        order
      }
      pagination {
        size
        page
      }
    }
  }
`;

// export const allPostsQueryVars = {
//   skip: 0,
//   first: 10,
// };

export async function getStaticProps() {
  const apolloClient = initializeApollo();
  await apolloClient.query({
    query: ALL_POSTS_QUERY,
    variables: {},
  });
  //   const navigation = await findNavData();
  //   const site = await findSiteData();

  return addApolloState(apolloClient, {
    props: {
      site: { list: [] },
      navigation: {
        list: [],
      },
    },
    revalidate: 1,
  });
  //   return {
  //     props: {
  //       site,
  //       navigation,
  //     },
  //   };
}

type HomeProps = {
  site: SiteListResponse;
  navigation: NavigationListResponse;
};

const Home: NextPage<HomeProps> = ({ site, navigation }: HomeProps) => {
  const [navList] = useState(navigation.list);
  const [list, setList] = useState(site.list);
  const [query, setQuery] = useState(queryDetail);
  const [total, setTotal] = useState(site.total);

  const { loading, error, data, fetchMore, networkStatus } = useQuery(
    ALL_POSTS_QUERY,
    {
      variables: {},
      // Setting this value to true will make the component rerender when
      // the "networkStatus" changes, so we are able to know if it is fetching
      // more data
      notifyOnNetworkStatusChange: true,
    }
  );

  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;
  console.log("loading", loading);
  console.log("data", data);
  console.log("loadingMorePosts", loadingMorePosts);

  //   const loadMorePosts = () => {
  //     fetchMore({
  //       variables: {
  //         skip: allPosts.length,
  //       },
  //     });
  //   };
  useEffect(() => {
    console.log("====data", data);
  }, [data]);
  if (error) return <div>Error loading posts.</div>;
  if (loading && !loadingMorePosts) return <div>Loading</div>;

  //   const { allPosts, _allPostsMeta } = data;
  //   const areMorePosts = allPosts.length < _allPostsMeta.count;

  const siteContext = { list, setList, query, setQuery, total, setTotal };
  console.log("data", data);
  return (
    <div className={styles.container}>
      <Head>
        <title>vue.design</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavigationListContext.Provider value={{ navList }}>
        <Header />
      </NavigationListContext.Provider>
      <SiteListContext.Provider value={siteContext}>
        <List type="home" />
        <Footer />
      </SiteListContext.Provider>
    </div>
  );
};

export default Home;
